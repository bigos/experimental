* Literal config

  Other examples can be found here
  https://github.com/caisah/emacs.dz
  https://github.com/alhassy/emacs.d
    
** beginning
   #+begin_src emacs-lisp
     (message "\nbeginning of literal config")

     ;; reduce the frequency of garbage collection by making it happen on
     ;; each 50MB of allocated data (the default is on every 0.76MB)
     (setq gc-cons-threshold 50000000)
   #+end_src
   
** Config
   
*** Define folders
    In init.el we alredy have defined ~init-dir~ folder.
    
**** core
     #+begin_src emacs-lisp
       (defvar experimental-core-dir (expand-file-name "core" init-dir)
	 "The core functionality.")

       (add-to-list 'load-path experimental-core-dir)
     #+end_src

**** modules
     #+begin_src emacs-lisp
       (defvar experimental-modules-dir (expand-file-name  "modules" init-dir)
	 "This is the folder for Experimental modules.")

       (add-to-list 'load-path experimental-modules-dir )
     #+end_src
**** vendor
     #+begin_src emacs-lisp
       (defvar experimental-vendor-dir (expand-file-name "vendor" init-dir)
	 "This directory houses packages that are not yet available in ELPA (or MELPA).")

       (add-to-list 'load-path experimental-vendor-dir)
     #+end_src

**** savefile
     #+begin_src emacs-lisp
       (defvar experimental-savefile-dir (expand-file-name "savefile" init-dir)
	 "This directory houses packages that are not yet available in ELPA (or MELPA).")

       (add-to-list 'load-path experimental-savefile-dir)
     #+end_src
     
**** require selected modules
     This will allow for un/commenting required modules
     
*** Load some Melpa packages

    Define package source and load some desired packages when neccesay.
    
    #+begin_src emacs-lisp
      ;; accessing a package repo over https on Windows is a no go, so we
      ;; fallback to http there
      (if (eq system-type 'windows-nt)
	  (add-to-list 'package-archives
		       '("melpa" . "http://melpa.org/packages/") t)
	(add-to-list 'package-archives
		     '("melpa" . "https://melpa.org/packages/") t))

      ;; set package-user-dir to be relative to init.el path
      (setq package-user-dir (expand-file-name "elpa" init-dir))

      (require 'package)

      (defun melpa-install-packages (packages)
	"Install all packages in packages list."
	(let ((refreshed nil))    
	  (mapc
	   (lambda (pkg)
	     (unless (package-installed-p pkg)	 
	       (unless refreshed
		 (message "%s" "Emacs is refreshing Melpa packages...")
		 (package-refresh-contents)
		 (setf refreshed t)
		 (message "%s" " done."))
	       (package-install pkg)))
	   packages)))

      ;; install packages in the following list
      (melpa-install-packages '(				
				ag
				anzu
				avy
				browse-kill-ring
				color
				crux
				diff-hl
				diminish
				discover-my-major
				easy-kill
				editorconfig
				eldoc
				epl
				expand-region
				flycheck
				gist
				guru-mode
				helm-descbinds
				hl-todo

				imenu-anywhere
				magit
				move-text
				nlinum
				operate-on-number
				paredit
				projectile
				prop-menu
				rainbow-delimiters
				slime
				smartparens
				smartrep
				super-save
				undo-tree
				use-package
				volatile-highlights
				
				zenburn-theme
				zop-to-char
				))
    #+end_src


   
*** Use package config
    #+begin_src emacs-lisp
      (eval-when-compile
	(require 'use-package))
      (require 'diminish)                ;; if you use :diminish
      (require 'bind-key)                ;; if you use any :bind variant
    #+end_src

*** Bind key

    Use package needs bind key
    
    #+begin_src emacs-lisp
      (use-package bind-key
	:ensure t
	:config
	(add-to-list 'same-window-buffer-names "*Personal Keybindings*"))
    #+end_src
    
*** Recent files

    This is at the top because we want it to work even if smething further down fails.
   
    #+begin_src emacs-lisp
      (use-package recentf
	:init
	(setq recentf-max-menu-items 25
	      recentf-auto-cleanup 'never
	      recentf-keep '(file-remote-p file-readable-p))
	(recentf-mode 1)
	(let ((last-ido "~/.emacs.d/ido.last"))
	  (when (file-exists-p last-ido)
	    (delete-file last-ido)))

	:bind ("s-r" . recentf-open-files))
    #+end_src

*** Ace window
    #+begin_src emacs-lisp
		  (use-package ace-window
		    :ensure t
		    :init
		    (custom-set-faces
		     '(aw-leading-char-face
		       ((t (:inherit ace-jump-face-foreground
				     :height 3.0
				     :foreground "red")))))
		    :bind ("C-x o" . ace-window))
    #+end_src

*** Helm descbinds
    #+begin_src emacs-lisp
      (use-package helm-descbinds
	:bind ("C-h b" . helm-descbinds))  
    #+end_src
    
*** y-or-n-p
    #+begin_src emacs-lisp
      (fset 'yes-or-no-p 'y-or-n-p)
    #+end_src
    
*** some shortcuts
    #+begin_src emacs-lisp

;; Font size
(global-set-key (kbd "C-+") 'text-scale-increase)
(global-set-key (kbd "C--") 'text-scale-decrease)

;; Window switching. (C-x o goes to the next window)
(global-set-key (kbd "C-x O") (lambda ()
                                (interactive)
                                (other-window -1))) ;; back one

;; toggle menu-bar visibility
(global-set-key (kbd "<f12>") 'menu-bar-mode)

    #+end_src
    
*** More settings from prelude init
    
**** Big file warning
     #+begin_src emacs-lisp
       ;; warn when opening files bigger than 100MB
       (setq large-file-warning-threshold 100000000)
     #+end_src

**** Location of customize settings
     #+begin_src emacs-lisp
       ;; config changes made through the customize UI will be stored here
       (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
       (ignore-errors (load custom-file)) ;; It may not yet exist.
     #+end_src
    
**** Inhibit showing of splash screen
     #+begin_src emacs-lisp
       ;; "Don't show splash screen"
       (setq inhibit-startup-screen t)
     #+end_src

**** Backup, autosave and other editor settings

#+begin_src emacs-lisp
  ;; Emacs modes typically provide a standard means to change the
  ;; indentation width -- eg. c-basic-offset: use that to adjust your
  ;; personal indentation width, while maintaining the style (and
  ;; meaning) of any files you load.
  (setq-default indent-tabs-mode nil)   ;; don't use tabs to indent
  (setq-default tab-width 8)            ;; but maintain correct appearance

  ;; Newline at end of file
  (setq require-final-newline t)

  ;; delete the selection with a keypress
  (delete-selection-mode t)

  ;; store all backup and autosave files in the tmp dir
  (setq backup-directory-alist
	`((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms
	`((".*" ,temporary-file-directory t)))

  ;; revert buffers automatically when underlying files are changed externally
  (global-auto-revert-mode t)

     #+end_src

*** Emacs server
    
    Allow access from emacsclient
    
    #+begin_src emacs-lisp
      (require 'server)
      (add-hook 'after-init-hook
		(lambda ()
		  (unless (server-running-p)
		    (server-start))))
    #+end_src

*** Window title
    #+begin_src emacs-lisp
      ;; more useful frame title, that show either a file or a
      ;; buffer name (if the buffer isn't visiting a file)
      (setq frame-title-format
	    '("" invocation-name " Experimental - " (:eval (if (buffer-file-name)
						  (abbreviate-file-name (buffer-file-name))
						"%b"))))
    #+end_src

    
*** Which key
    #+begin_example emacs-lisp
      (use-package which-key
        :ensure t
        :config
	(which-key-mode +1))  
    #+end_example
    
*** Turn off tool bar
    #+begin_src emacs-lisp
      (tool-bar-mode -1)
    #+end_src

*** Autocompletion - ivy   
**** Ivy
https://dev.to/deciduously/how-i-emacs-and-so-can-you-packages-m9p
#+begin_src emacs-lisp

  ;; (use-package ivy
  ;;   :ensure t				;make sure ivy is installed
  ;;   :diminish 
  ;;   :init (ivy-mode 1)			;globally at startup
  ;;   :config
  ;;   (setq ivy-use-virtual-buffers t)
  ;;   (setq enable-recursive-minibuffers t)
  ;;   (setq ivy-height 20)
  ;;   (setq ivy-count-format "%d/%d ")
  ;;   :bind ("C-c C-r" . ivy-resume))
#+end_src


**** Swiper
Improved C-s search
#+begin_src emacs-lisp
  ;; (use-package swiper
  ;;   :ensure t
  ;;   :bind ("C-s" . swiper))
#+end_src

**** Counsel
#+begin_src emacs-lisp
  ;; (use-package counsel
  ;;   :ensure t
  ;;   :bind*				;load when pressed
  ;;   (
  ;;    ("M-x"     . counsel-M-x)
  ;;    ("C-x C-f" . counsel-find-file)
  ;;    ("C-x C-r" . counsel-recentf)  ; search for recently edited
  ;;    ("C-c g"   . counsel-git)      ; search for files in git repo
  ;;    ("C-c j"   . counsel-git-grep) ; search for regexp in git repo
  ;;    ("C-c /"   . counsel-ag)       ; Use ag for regexp
  ;;    ("C-x l"   . counsel-locate)
  ;;    ("C-x C-f" . counsel-find-file)
  ;;    ("<f1> f"  . counsel-describe-function)
  ;;    ("<f1> v"  . counsel-describe-variable)
  ;;    ("<f1> l"  . counsel-find-library)
  ;;    ("<f2> i"  . counsel-info-lookup-symbol)
  ;;    ("<f2> u"  . counsel-unicode-char)
  ;;    ))
#+end_src

*** Autocompletion - ido
#+begin_src emacs-lisp
    (use-package ido
      :ensure t
      :config
      (setq ido-enable-prefix nil
	    ido-enable-flex-matching t
	    ido-create-new-buffer 'always
	    ido-use-filename-at-point 'guess
	    ido-max-prospects 10
	    ido-save-directory-list-file (expand-file-name "ido.hist" experimental-savefile-dir)
	    ido-default-file-method 'selected-window
	    ido-auto-merge-work-directories-length -1)
      (ido-mode +1)
      (ido-ubiquitous-mode +1)
      (setq ido-use-faces nil)

      )
#+end_src

#+begin_src emacs-lisp
  (use-package ido-completing-read+
    :ensure t
    :config
   )
#+end_src

#+begin_src emacs-lisp
    (use-package flx-ido
      :ensure t
      :config
      (flx-ido-mode +1)
     )
#+end_src

#+begin_src emacs-lisp
  (use-package smex
    :ensure t
    :config
    (setq smex-save-file (expand-file-name ".smex-items" experimental-savefile-dir))
    (smex-initialize)
    (global-set-key (kbd "M-x") 'smex)
    (global-set-key (kbd "M-X") 'smex-major-mode-commands)

    )
#+end_src

*** Company
Pop up menu

#+begin_src emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0.5)
    (setq company-show-numbers t)
    (setq company-tooltip-limit 10)
    (setq company-minimum-prefix-length 2)
    (setq company-tooltip-align-annotations t)
    ;; invert the navigation direction if the the completion popup-isearch-match
    ;; is displayed on top (happens near the bottom of windows)
    (setq company-tooltip-flip-when-above t)

    (global-company-mode 1)
    (diminish 'company-mode)

    (provide 'prelude-company)
    )
#+end_src

*** Add mode flashing in overwrite
    #+begin_src emacs-lisp
      (defun double-flash-mode-line ()
	(let ((flash-sec (/ 1.0 20)))
	  (invert-face 'mode-line)
	  (run-with-timer flash-sec nil #'invert-face 'mode-line)
	  (run-with-timer (* 2 flash-sec) nil #'invert-face 'mode-line)
	  (run-with-timer (* 3 flash-sec) nil #'invert-face 'mode-line)))

      (add-hook 'overwrite-mode-hook #'(lambda () (double-flash-mode-line)))
    #+end_src

*** Cleanup 80

    Needs polish TODO
    
    #+begin_src emacs-lisp
      (defun cleanup-80 ()
	(interactive)
	(beginning-of-line)
	(forward-char 80)
	(forward-word)
	(backward-word)

	;; insert new line char
	(newline-and-indent))

      (global-set-key (kbd "s-8") 'cleanup-80)
    #+end_src

*** Graph arrow
    Insert -> in the buffer.
    
    #+begin_src emacs-lisp
      (defun insert-graph-arrow ()
	(interactive)
	(insert " -> "))

      (global-set-key (kbd "s-]") 'insert-graph-arrow)
    #+end_src
*** Big settings
**** Org mode configuration

      https://fortelabs.co/blog/building-a-second-brain-in-emacs-and-org-mode/
      
***** org-roam
#+begin_src emacs-lisp
  ;; Org-Roam basic configuration
  (setq org-directory (concat (getenv "HOME") "/Documents/org-roam/"))

  (use-package org-roam
    :ensure t
    :after org
    :init (setq org-roam-v2-ack t) ;; Acknowledge V2 upgrade
    :custom
    (org-roam-directory (file-truename org-directory))
    :config
    (org-roam-db-autosync-enable)
    :bind (("C-c n f" . org-roam-node-find)
           ("C-c n g" . org-roam-graph)
           ("C-c n r" . org-roam-node-random)		    
           (:map org-mode-map
                 (("C-c n i" . org-roam-node-insert)
                  ("C-c n o" . org-id-get-create)
                  ("C-c n t" . org-roam-tag-add)
                  ("C-c n a" . org-roam-alias-add)
                  ("C-c n l" . org-roam-buffer-toggle)))))
#+end_src

***** pdf link to page index
    
     #+BEGIN_SRC emacs-lisp
       (require 'org)
       (org-link-set-parameters "pdf" 'org-pdf-open nil)

       (defun org-pdf-open (link)
	 "Where page number is 105, the link should look like:
	  [[pdf:/path/to/file.pdf#105][My description.]]"
	 (let* ((path+page (split-string link "#"))
		(pdf-file (car path+page))
		(page (car (cdr path+page))))
	   (start-process "view-pdf" nil "evince" "--page-index" page pdf-file)))
     #+END_SRC



***** link to a file and line
      #+begin_src emacs-lisp
 (defun my-file-line-link ()
   "Copy the buffer full path and line number into a clipboard
                  for pasting into *.org file."
   (interactive)
   (let* ((home-part (concat "/home/"
                             (user-login-name)))
          (the-link
           (let ((file-link
                  (concat "file:"
                          (let ((bfn buffer-file-name))
                            (if (string-prefix-p home-part bfn)
				(concat "~"
					(substring bfn (length home-part)))
                              bfn))
                          "::"
                          (substring  (what-line) 5))))
             (if (string-match " " file-link)
                 (concat "[[" file-link "]]")
               file-link))))
     (kill-new
      (message the-link))))

	;; we had to cheat to have s-\ as a shortcut
 (global-set-key (kbd (format "%s-%c" "s" 92)) 'my-file-line-link)
      #+end_src

**** Idris


    #+begin_src emacs-lisp
  (use-package idris2-mode
    :load-path "vendor/idris2-mode"
    
    )  
    #+end_src

    
**** Lisp
    
***** Emasc Lisp
TODO add code for nicer ielm experiemce

****** jacek-verse
We need to use path like this

#+begin_src emacs-lisp
  (use-package jacek-verse
    :load-path "modules/"
    :bind ("<f5>" . verse-link)
    )  
#+end_src

***** Clojure
  #+BEGIN_SRC emacs-lisp
    (add-to-list 'auto-mode-alist '("\\.edn\\'" . clojure-mode))

    (add-hook 'cider-repl-mode-hook
              #'(lambda ()
                 (local-set-key (kbd "C-c M-k") 'cider-repl-clear-buffer)))

    (add-hook 'cider-repl-mode-hook
              #'(lambda ()
                 (local-set-key (kbd "C-c M-a") 'cider-load-all-files)))
  #+END_SRC


 
***** Slime
 #+BEGIN_SRC emacs-lisp
   ;;; this code has been responsible for slime version problem
   (defvar slime-helper-el "~/quicklisp/slime-helper.el")
   (when (file-exists-p slime-helper-el)
     (load (expand-file-name slime-helper-el)))

   (require 'slime)
   (require 'slime-repl)
   (require 'slime-autoloads)

   (setq slime-contribs '(slime-fancy slime-fancy-inspector))

   (setq inferior-lisp-program "/usr/local/bin/sbcl")

   (defun slime-contrib-directory ()
     (let* ((slime-folder-prefix "slime-20")
	    (folder-length (length slime-folder-prefix))
	    (slime-folder (car (seq-filter (lambda(x) (and (>= (length x)
							       folder-length)
							   (equal slime-folder-prefix
								  (seq-subseq x 0 folder-length))) )
					   (directory-files "~/.emacs.d/elpa")))))
       (concat "~/.emacs.d/elpa/" slime-folder "/contrib/")))
 
 

   ;;; copy last s-expression to repl
   ;;; useful for expressions like (in-package #:whatever)
   ;;; alternatively you can use C-c ~ with cursor after (in-package :some-package)
   ;;; https://www.reddit.com/r/lisp/comments/ehs12v/copying_last_expression_to_repl_in_emacsslime/

   (defun slime-copy-last-expression-to-repl (string)
     (interactive (list (slime-last-expression)))
     (slime-switch-to-output-buffer)
     (goto-char (point-max))
     (insert string))

   (global-set-key (kbd "s-e") 'slime-copy-last-expression-to-repl)
 #+END_SRC

***** Paredit
 #+BEGIN_SRC emacs-lisp
   (add-hook 'minibuffer-inactive-mode-hook #'paredit-mode)
   (add-hook 'minibuffer-inactive-mode-hook #'rainbow-delimiters-mode)

   (defun swap-paredit ()
     "Replace smartparens with superior paredit."
     (smartparens-mode -1)
     (paredit-mode +1))

   (autoload 'paredit-mode "paredit"
     "Minor mode for pseudo-structurally editing Lisp code." t)
   (add-hook 'emacs-lisp-mode-hook (lambda () (swap-paredit)))

   (add-hook 'lisp-mode-hook (lambda () (swap-paredit)))
   (add-hook 'lisp-interaction-mode-hook (lambda () (swap-paredit)))

   (add-hook 'scheme-mode-hook (lambda () (swap-paredit)))
   (add-hook 'geiser-repl-mode-hook (lambda () (swap-paredit)))
   (add-hook 'geiser-repl-mode-hook 'rainbow-delimiters-mode)

   (add-hook 'ielm-mode-hook (lambda () (swap-paredit)))
   (add-hook 'ielm-mode-hook 'rainbow-delimiters-mode)

   (add-hook 'slime-repl-mode-hook (lambda () (swap-paredit)))
   (add-hook 'slime-repl-mode-hook 'rainbow-delimiters-mode)

   (add-hook 'clojure-mode-hook (lambda () (swap-paredit)))
   (add-hook 'cider-repl-mode-hook (lambda () (swap-paredit)))
 #+END_SRC

***** The rest
 #+BEGIN_SRC emacs-lisp
   ;(require 'slime)
   ;; (setq common-lisp-hyperspec-root
   ;;       (format
   ;;        "file:/home/%s/Documents/Manuals/Lisp/HyperSpec-7-0/HyperSpec/"
   ;;        user-login-name))

     (defun unfold-lisp ()
       "Unfold lisp code."
       (interactive)
       (search-forward ")")
       (backward-char)
       (search-forward " ")
       (newline-and-indent))

     (global-set-key (kbd "s-0") 'unfold-lisp)
 #+END_SRC

**** Parentheses coloring

 #+BEGIN_SRC emacs-lisp
   ;;; this add capability to define your own hook for responding to theme changes
   (defvar after-load-theme-hook nil
     "Hook run after a color theme is loaded using `load-theme'.")

   (defadvice load-theme (after run-after-load-theme-hook activate)
     "Run `after-load-theme-hook'."
     (run-hooks 'after-load-theme-hook))

   (require 'color)
   (defun hsl-to-hex (h s l)
     "Convert H S L to hex colours."
     (let (rgb)
       (setq rgb (color-hsl-to-rgb h s l))
       (color-rgb-to-hex (nth 0 rgb)
			 (nth 1 rgb)
			 (nth 2 rgb))))

   (defun hex-to-rgb (hex)
     "Convert a 6 digit HEX color to r g b."
     (mapcar #'(lambda (s) (/ (string-to-number s 16) 255.0))
	     (list (substring hex 1 3)
		   (substring hex 3 5)
		   (substring hex 5 7))))

   (defun bg-color ()
     "Return COLOR or it's hexvalue."
     (let ((color (face-attribute 'default :background)))
       (if (equal (substring color 0 1) "#")
	   color
	 (apply 'color-rgb-to-hex (color-name-to-rgb color)))))

   (defun bg-light ()
     "Calculate background brightness."
     (< (color-distance  "white"
			 (bg-color))
	(color-distance  "black"
			 (bg-color))))

   (defun whitespace-line-bg ()
     "Calculate long line highlight depending on background brightness."
     (apply 'color-rgb-to-hex
	    (apply 'color-hsl-to-rgb
		   (apply (if (bg-light) 'color-darken-hsl 'color-lighten-hsl)
			  (append
			   (apply 'color-rgb-to-hsl
				  (hex-to-rgb
				   (bg-color)))
			   '(7))))))

   (defun bracket-colors ()
     "Calculate the bracket colours based on background."
     (let (hexcolors lightvals)
       (setq lightvals (if (bg-light)
			   (list (list .60 1.0 0.55) ; H S L
				 (list .30 1.0 0.40)
				 (list .11 1.0 0.55)
				 (list .01 1.0 0.65)
				 (list .75 0.9 0.55) ; H S L
				 (list .49 0.9 0.40)
				 (list .17 0.9 0.47)
				 (list .05 0.9 0.55))
			 (list (list .70 1.0 0.68) ; H S L
			       (list .30 1.0 0.40)
			       (list .11 1.0 0.50)
			       (list .01 1.0 0.50)
			       (list .81 0.9 0.55) ; H S L
			       (list .49 0.9 0.40)
			       (list .17 0.9 0.45)
			       (list .05 0.9 0.45))))
       (dolist (n lightvals)
	 (push (apply 'hsl-to-hex n) hexcolors))
       (reverse hexcolors)))


   (defun colorise-brackets ()
     "Apply my own colours to rainbow delimiters."
     (interactive)
     (require 'rainbow-delimiters)
     (custom-set-faces
      ;; change the background but do not let theme to interfere with the foreground
      `(whitespace-line ((t (:background ,(whitespace-line-bg)))))
      ;; or use (list-colors-display)
      `(rainbow-delimiters-depth-2-face ((t (:foreground ,(nth 0 (bracket-colors))))))
      `(rainbow-delimiters-depth-3-face ((t (:foreground ,(nth 1 (bracket-colors))))))
      `(rainbow-delimiters-depth-4-face ((t (:foreground ,(nth 2 (bracket-colors))))))
      `(rainbow-delimiters-depth-5-face ((t (:foreground ,(nth 3 (bracket-colors))))))
      `(rainbow-delimiters-depth-6-face ((t (:foreground ,(nth 4 (bracket-colors))))))
      `(rainbow-delimiters-depth-7-face ((t (:foreground ,(nth 5 (bracket-colors))))))
      `(rainbow-delimiters-depth-8-face ((t (:foreground ,(nth 6 (bracket-colors))))))
      `(rainbow-delimiters-depth-9-face ((t (:foreground ,(nth 7 (bracket-colors))))))
      `(rainbow-delimiters-unmatched-face ((t (:foreground "white" :background "red"))))
      `(highlight ((t (:foreground "#ff0000" :background "#888"))))))

   (colorise-brackets)

   (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
   (add-hook 'after-load-theme-hook 'colorise-brackets)


 #+END_SRC

** The end
   #+begin_src emacs-lisp
     ;; put frequency of garbage collection back to normal     
     (setq gc-cons-threshold  800000)

     (message "\nthe end of literal config\n")
   #+end_src
   
** tip of the day
   
   #+begin_src emacs-lisp
     (message "M-x describe-personal-keybindings will show keybindings defined in use-package user configuration.")
   #+end_src
   
