(((elisp org-element--headline-cache) . #s(avl-tree- [[[[[[[nil nil #3=(headline (:raw-value #1="Literal config" :begin 1 :end 26167 :pre-blank 1 :contents-begin 19 :contents-end 26167 :robust-begin 21 :robust-end 26165 :level 1 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 1 :title #1# :mode first-section :granularity element :cached t :parent #63=(org-data (:begin 1 :contents-begin 1 :contents-end 26167 :end 26167 :robust-begin 3 :robust-end 26165 :post-blank 0 :post-affiliated 1 :path "c:/Users/jacek/AppData/Roaming/.emacs.d/literal-config.org" :mode org-data :CATEGORY "literal-config" :cached t :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] nil #64=(headline (:raw-value #2="beginning" :begin 229 :end 512 :pre-blank 0 :contents-begin 242 :contents-end 511 :robust-begin 244 :robust-end 509 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 229 :title #2# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) -1] [[nil nil #66=(headline (:raw-value #4="graph arrow" :begin 525 :end 640 :pre-blank 0 :contents-begin 541 :contents-end 640 :robust-begin 543 :robust-end 638 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 525 :title #4# :parent #8=(headline (:raw-value #5="Functions" :begin 512 :end 938 :pre-blank 0 :contents-begin 525 :contents-end 937 :robust-begin 527 :robust-end 935 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 512 :title #5# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #3#)) :cached t :org-element--cache-sync-key nil :granularity element)) 0] [nil nil #10=(headline (:raw-value #6="Config" :begin 938 :end 25797 :pre-blank 1 :contents-begin 949 :contents-end 25795 :robust-begin 951 :robust-end 25793 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 938 :title #6# :parent #3# :cached t :org-element--cache-sync-key nil :granularity element)) 0] #67=(headline (:raw-value #7="Cleanup 80" :begin 640 :end 938 :pre-blank 1 :contents-begin 656 :contents-end 937 :robust-begin 658 :robust-end 935 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 640 :title #7# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #8#)) 0] #8# 0] [[[nil nil #12=(headline (:raw-value #9="Define folders" :begin 2982 :end 4135 :pre-blank 0 :contents-begin 3001 :contents-end 4134 :robust-begin 3003 :robust-end 4132 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 2982 :title #9# :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #10#)) 0] [nil nil #73=(headline (:raw-value #11="modules" :begin 3276 :end 3527 :pre-blank 0 :contents-begin 3289 :contents-end 3527 :robust-begin 3291 :robust-end 3525 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3276 :title #11# :mode nil :granularity element :cached t :parent #12# :org-element--cache-sync-key nil)) 0] #72=(headline (:raw-value #13="core" :begin 3059 :end 3276 :pre-blank 0 :contents-begin 3069 :contents-end 3275 :robust-begin 3071 :robust-end 3273 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3059 :title #13# :mode nil :granularity element :cached t :parent #12# :org-element--cache-sync-key nil)) 0] [[nil nil #78=(headline (:raw-value #14="savefile" :begin 3806 :end 4048 :pre-blank 0 :contents-begin 3820 :contents-end 4047 :robust-begin 3822 :robust-end 4045 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3806 :title #14# :mode nil :granularity element :cached t :parent #12# :org-element--cache-sync-key nil)) 0] [nil nil #81=(headline (:raw-value #15="Recent files" :begin 4359 :end 4887 :pre-blank 1 :contents-begin 4377 :contents-end 4886 :robust-begin 4379 :robust-end 4884 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 4359 :title #15# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] #79=(headline (:raw-value #16="Bind key" :begin 4135 :end 4359 :pre-blank 1 :contents-begin 4149 :contents-end 4358 :robust-begin 4151 :robust-end 4356 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 4135 :title #16# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] #74=(headline (:raw-value #17="vendor" :begin 3527 :end 3806 :pre-blank 0 :contents-begin 3539 :contents-end 3805 :robust-begin 3541 :robust-end 3803 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 3527 :title #17# :mode nil :granularity element :cached t :parent #12# :org-element--cache-sync-key nil)) 0] #70=(headline (:raw-value #18="init stuff melpa packages" :begin 949 :end 2982 :pre-blank 0 :contents-begin 979 :contents-end 2981 :robust-begin 981 :robust-end 2979 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 949 :title #18# :parent #10# :cached t :org-element--cache-sync-key nil :granularity element)) 0] [[[[nil nil #85=(headline (:raw-value #19="Helm descbinds" :begin 5345 :end 5500 :pre-blank 0 :contents-begin 5364 :contents-end 5499 :robust-begin 5366 :robust-end 5497 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 5345 :title #19# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] [nil nil #89=(headline (:raw-value #20="some shortcuts" :begin 5591 :end 6049 :pre-blank 0 :contents-begin 5610 :contents-end 6048 :robust-begin 5612 :robust-end 6046 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 5591 :title #20# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] #87=(headline (:raw-value #21="y-or-n-p" :begin 5500 :end 5591 :pre-blank 0 :contents-begin 5513 :contents-end 5590 :robust-begin 5515 :robust-end 5588 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 5500 :title #21# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] [[nil nil #91=(headline (:raw-value #22="Big file warning" :begin 6086 :end 6257 :pre-blank 0 :contents-begin 6108 :contents-end 6256 :robust-begin 6110 :robust-end 6254 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 6086 :title #22# :mode section :granularity element :cached t :parent #25=(headline (:raw-value #23="More settings from prelude init" :begin 6049 :end 7650 :pre-blank 1 :contents-begin 6086 :contents-end 7649 :robust-begin 6088 :robust-end 7647 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 6049 :title #23# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #94=(headline (:raw-value #24="Inhibit showing of splash screen" :begin 6557 :end 6715 :pre-blank 0 :contents-begin 6595 :contents-end 6714 :robust-begin 6597 :robust-end 6712 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 6557 :title #24# :mode nil :granularity element :cached t :parent #25# :org-element--cache-sync-key nil)) 0] #92=(headline (:raw-value #26="Location of customize settings" :begin 6257 :end 6557 :pre-blank 0 :contents-begin 6293 :contents-end 6556 :robust-begin 6295 :robust-end 6554 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 6257 :title #26# :mode nil :granularity element :cached t :parent #25# :org-element--cache-sync-key nil)) 0] #25# 0] [[[nil nil #99=(headline (:raw-value #27="Emacs server" :begin 7650 :end 7912 :pre-blank 1 :contents-begin 7668 :contents-end 7911 :robust-begin 7670 :robust-end 7909 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7650 :title #27# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] [nil nil #102=(headline (:raw-value #28="Which key" :begin 8348 :end 8673 :pre-blank 0 :contents-begin 8362 :contents-end 8672 :robust-begin 8364 :robust-end 8670 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 8348 :title #28# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] #101=(headline (:raw-value #29="Window title" :begin 7912 :end 8348 :pre-blank 0 :contents-begin 7929 :contents-end 8346 :robust-begin 7931 :robust-end 8344 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 7912 :title #29# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] [[nil nil #32=(headline (:raw-value #30="Autocompletion - ivy" :begin 8754 :end 10157 :pre-blank 0 :contents-begin 8779 :contents-end 10156 :robust-begin 8781 :robust-end 10154 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 8754 :title #30# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] [nil nil #107=(headline (:raw-value #31="Swiper" :begin 9233 :end 9361 :pre-blank 0 :contents-begin 9245 :contents-end 9360 :robust-begin 9247 :robust-end 9358 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 9233 :title #31# :mode nil :granularity element :cached t :parent #32# :org-element--cache-sync-key nil)) 0] #106=(headline (:raw-value #33="Ivy" :begin 8779 :end 9233 :pre-blank 0 :contents-begin 8788 :contents-end 9231 :robust-begin 8790 :robust-end 9229 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 8779 :title #33# :mode section :granularity element :cached t :parent #32# :org-element--cache-sync-key nil)) 0] #104=(headline (:raw-value #34="Turn off tool bar" :begin 8673 :end 8754 :pre-blank 0 :contents-begin 8695 :contents-end 8753 :robust-begin 8697 :robust-end 8751 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 8673 :title #34# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] #97=(headline (:raw-value #35="Backup, autosave and other editor settings" :begin 6715 :end 7650 :pre-blank 1 :contents-begin 6764 :contents-end 7649 :robust-begin 6766 :robust-end 7647 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 6715 :title #35# :mode nil :granularity element :cached t :parent #25# :org-element--cache-sync-key nil)) 0] #83=(headline (:raw-value #36="Ace window" :begin 4887 :end 5345 :pre-blank 0 :contents-begin 4902 :contents-end 5344 :robust-begin 4904 :robust-end 5342 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 4887 :title #36# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] [[[[nil nil #111=(headline (:raw-value #37="smex" :begin 10157 :end 10386 :pre-blank 0 :contents-begin 10166 :contents-end 10385 :robust-begin 10168 :robust-end 10383 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 10157 :title #37# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] [nil nil #116=(headline (:raw-value #38="Company" :begin 11390 :end 11947 :pre-blank 0 :contents-begin 11402 :contents-end 11946 :robust-begin 11404 :robust-end 11944 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 11390 :title #38# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] #114=(headline (:raw-value #39="Autocompletion - ido" :begin 10386 :end 11390 :pre-blank 0 :contents-begin 10419 :contents-end 11389 :robust-begin 10421 :robust-end 11387 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp 10595 :post-affiliated 10386 :title #39# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] [[nil nil #119=(headline (:raw-value #40="Add mode flashing in overwrite" :begin 12950 :end 13432 :pre-blank 0 :contents-begin 12985 :contents-end 13428 :robust-begin 12987 :robust-end 13426 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 4 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 12950 :title #40# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] [nil nil #121=(headline (:raw-value #41="org-roam" :begin 13540 :end 14491 :pre-blank 0 :contents-begin 13554 :contents-end 14490 :robust-begin 13556 :robust-end 14488 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 13540 :title #41# :mode nil :granularity element :cached t :parent #43=(headline (:raw-value #42="Org mode configuration" :begin 13432 :end 16073 :pre-blank 1 :contents-begin 13460 :contents-end 16072 :robust-begin 13462 :robust-end 16070 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 13432 :title #42# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #43# 0] #117=(headline (:raw-value #44="Origami" :begin 11947 :end 12950 :pre-blank 1 :contents-begin 11960 :contents-end 12949 :robust-begin 11962 :robust-end 12947 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 11947 :title #44# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] [[[[nil nil #124=(headline (:raw-value #45="link to a file and line" :begin 15024 :end 16073 :pre-blank 0 :contents-begin 15053 :contents-end 16072 :robust-begin 15055 :robust-end 16070 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 15024 :title #45# :mode nil :granularity element :cached t :parent #43# :org-element--cache-sync-key nil)) 0] [nil nil #131=(headline (:raw-value #46="Elm" :begin 16236 :end 16449 :pre-blank 0 :contents-begin 16244 :contents-end 16449 :robust-begin 16246 :robust-end 16447 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16236 :title #46# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] #125=(headline (:raw-value #47="Idris" :begin 16073 :end 16236 :pre-blank 2 :contents-begin 16085 :contents-end 16235 :robust-begin 16087 :robust-end 16233 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16073 :title #47# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] [[nil nil #53=(headline (:raw-value #48="Emasc Lisp" :begin 16529 :end 16786 :pre-blank 0 :contents-begin 16545 :contents-end 16785 :robust-begin 16547 :robust-end 16783 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16529 :title #48# :mode nil :granularity element :cached t :parent #51=(headline (:raw-value #49="Lisp" :begin 16449 :end 21491 :pre-blank 0 :contents-begin 16458 :contents-end 21490 :robust-begin 16460 :robust-end 21488 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16449 :title #49# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #135=(headline (:raw-value #50="Clojure" :begin 16786 :end 17180 :pre-blank 0 :contents-begin 16799 :contents-end 17178 :robust-begin 16801 :robust-end 17176 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16786 :title #50# :mode nil :granularity element :cached t :parent #51# :org-element--cache-sync-key nil)) 0] #133=(headline (:raw-value #52="jacek-verse" :begin 16586 :end 16786 :pre-blank 0 :contents-begin 16604 :contents-end 16785 :robust-begin 16606 :robust-end 16783 :level 5 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 16586 :title #52# :mode nil :granularity element :cached t :parent #53# :org-element--cache-sync-key nil)) 0] #51# 0] [[[nil nil #139=(headline (:raw-value #54="Slime" :begin 17358 :end 19873 :pre-blank 0 :contents-begin 17369 :contents-end 19872 :robust-begin 17371 :robust-end 19870 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 17358 :title #54# :mode nil :granularity element :cached t :parent #51# :org-element--cache-sync-key nil)) 0] [nil nil #142=(headline (:raw-value #55="The rest" :begin 21021 :end 21491 :pre-blank 0 :contents-begin 21035 :contents-end 21490 :robust-begin 21037 :robust-end 21488 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 21021 :title #55# :mode nil :granularity element :cached t :parent #51# :org-element--cache-sync-key nil)) 0] #141=(headline (:raw-value #56="Paredit" :begin 19873 :end 21021 :pre-blank 0 :contents-begin 19886 :contents-end 21020 :robust-begin 19888 :robust-end 21018 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 19873 :title #56# :mode nil :granularity element :cached t :parent #51# :org-element--cache-sync-key nil)) 0] [nil [nil nil #148=(headline (:raw-value #57="The end" :begin 25972 :end 26167 :pre-blank 0 :contents-begin 25983 :contents-end 26167 :robust-begin 25985 :robust-end 26165 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 0 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 25972 :title #57# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #146=(headline (:raw-value #58="tip of the day" :begin 25797 :end 25972 :pre-blank 1 :contents-begin 25816 :contents-end 25971 :robust-begin 25818 :robust-end 25969 :level 2 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 25797 :title #58# :mode nil :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 1] #144=(headline (:raw-value #59="Parentheses coloring" :begin 21491 :end 25797 :pre-blank 1 :contents-begin 21517 :contents-end 25795 :robust-begin 21519 :robust-end 25793 :level 3 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 2 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 21491 :title #59# :mode nil :granularity element :cached t :parent #10# :org-element--cache-sync-key nil)) 0] #136=(headline (:raw-value #60="Sly" :begin 17180 :end 17358 :pre-blank 0 :contents-begin 17189 :contents-end 17357 :robust-begin 17191 :robust-end 17355 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 17180 :title #60# :mode nil :granularity element :cached t :parent #51# :org-element--cache-sync-key nil)) 0] #122=(headline (:raw-value #61="pdf link to page index" :begin 14491 :end 15024 :pre-blank 1 :contents-begin 14520 :contents-end 15021 :robust-begin 14522 :robust-end 15019 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 3 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 14491 :title #61# :mode nil :granularity element :cached t :parent #43# :org-element--cache-sync-key nil)) 1] #109=(headline (:raw-value #62="Counsel" :begin 9361 :end 10157 :pre-blank 0 :contents-begin 9374 :contents-end 10156 :robust-begin 9376 :robust-end 10154 :level 4 :priority nil :tags nil :todo-keyword nil :todo-type nil :post-blank 1 :footnote-section-p nil :archivedp nil :commentedp nil :post-affiliated 9361 :title #62# :mode nil :granularity element :cached t :parent #32# :org-element--cache-sync-key nil)) 0] nil nil 0] org-element--cache-compare)) ((elisp org-element--cache) . #s(avl-tree- [[[[[[[[nil nil #63# 0] [nil nil (section (:begin 19 :end 229 :contents-begin 19 :contents-end 228 :robust-begin 19 :robust-end 226 :post-blank 1 :post-affiliated 19 :mode section :granularity element :cached t :parent #3# :org-element--cache-sync-key nil)) 0] #3# 0] [[nil nil #65=(section (:begin 242 :end 512 :contents-begin 242 :contents-end 511 :robust-begin 242 :robust-end 509 :post-blank 1 :post-affiliated 242 :mode section :granularity element :cached t :parent #64# :org-element--cache-sync-key nil)) 0] [nil nil #8# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 242 :end 512 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "     (message \"\\nbeginning of literal config\")\12\12     ;; reduce the frequency of garbage collection by making it happen on\12     ;; each 50MB of allocated data (the default is on every 0.76MB)\12     (setq gc-cons-threshold 50000000)\12" :post-blank 1 :post-affiliated 242 :mode planning :granularity element :cached t :parent #65# :org-element--cache-sync-key nil)) 0] #64# 0] [[[nil nil #68=(section (:begin 541 :end 640 :contents-begin 541 :contents-end 640 :robust-begin 541 :robust-end 638 :post-blank 0 :post-affiliated 541 :mode section :granularity element :cached t :parent #66# :org-element--cache-sync-key nil)) 0] [nil nil #67# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 541 :end 640 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun insert-graph-arrow ()\12  (interactive)\12  (insert \" -> \"))\12" :post-blank 0 :post-affiliated 541 :mode planning :granularity element :cached t :parent #68# :org-element--cache-sync-key nil)) 0] [nil nil (paragraph (:begin 656 :end 679 :contents-begin 656 :contents-end 678 :post-blank 1 :post-affiliated 656 :mode planning :granularity element :org-element--cache-sync-key nil :cached t :parent #69=(section (:begin 656 :end 938 :contents-begin 656 :contents-end 937 :robust-begin 656 :robust-end 935 :post-blank 1 :post-affiliated 656 :mode section :granularity element :org-element--cache-sync-key nil :cached t :parent #67#)))) 0] #69# -1] #66# 0] [[[[nil nil #10# 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 979 :end 2982 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "      (require 'package)\12\12    ;; accessing a package repo over https on Windows is a no go, so we\12    ;; fallback to http there\12    (add-to-list 'package-archives '(\"melpa\" . \"http://melpa.org/packages/\") t)\12\12\12  ;; Comment/uncomment this line to enable MELPA Stable if desired.  See `package-archive-priorities`\12  ;; and `package-pinned-packages`. Most users will not need or want to do this.\12  ;;(add-to-list 'package-archives '(\"melpa-stable\" . \"https://stable.melpa.org/packages/\") t)\12\12  (package-initialize)\12  (message \"package archives used %s\" package-archives)\12\12  ;; set package-user-dir to be relative to init.el path\12  (setq package-user-dir (expand-file-name \"elpa\" init-dir))\12\12\11(defun melpa-install-packages (packages)\12\11  \"Install all packages in packages list.\"\12\11  (let ((refreshed nil))\12\11    (mapc\12\11     (lambda (pkg)\12\11       (unless (package-installed-p pkg)\12\11\11 (unless refreshed\12\11\11   (message \"%s\" \"Emacs is refreshing Melpa packages...\")\12\11\11   (package-refresh-contents)\12\11\11   (setf refreshed t)\12\11\11   (message \"%s\" \" done.\"))\12\11\11 (package-install pkg)))\12\11     packages)))\12\12\11;; This is the list of packages to install. Remember, installing packages from\12\11;; melpa does not mean loading the into  Emacs.\12\12\11(when t\12\11  ;; install packages in the following list\12\11  (melpa-install-packages '(ansi-color\12\11\11\11\11    anzu\12\11\11\11\11    avy\12\11\11\11\11    browse-kill-ring\12\11\11\11\11    color\12\11\11\11\11    counsel\12\11\11\11\11    crux\12\11\11\11\11    diff-hl\12\11\11\11\11    diminish\12\11\11\11\11    discover-my-major\12\11\11\11\11    ;; ef-themes\12\11\11\11\11    eldoc\12\11\11\11\11    epl\12\11\11\11\11    expand-region\12\11\11\11\11    flx-ido\12\11\11\11\11    flycheck\12\11\11\11\11    helm-core\12\11\11\11\11    helm-descbinds\12\11\11\11\11    ;; ido-completing-read+\12\11\11\11\11    ;; imenu-anywhere\12\11\11\11\11    ;; magit\12\11\11\11\11    paredit\12\11\11\11\11    rainbow-delimiters\12\11\11\11\11    ;; slime\12\11\11\11\11    smartparens\12\11\11\11\11    smartrep\12\11\11\11\11    smex\12\11\11\11\11    super-save\12\11\11\11\11    swiper\12\11\11\11\11    ;; undo-tree\12\11\11\11\11    volatile-highlights\12\11\11\11\11    ;; vterm-toggle\12\11\11\11\11    which-key\12\11\11\11\11    whitespace\12\11\11\11\11    yafolding\12\11\11\11\11    ))\12\11  )\12\12" :post-blank 1 :post-affiliated 979 :mode planning :granularity element :cached t :parent #71=(section (:begin 979 :end 2982 :contents-begin 979 :contents-end 2981 :robust-begin 979 :robust-end 2979 :post-blank 1 :post-affiliated 979 :mode section :granularity element :cached t :parent #70# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #71# 1] #70# 1] [nil [nil nil #72# 0] (section (:begin 3001 :end 3059 :contents-begin 3001 :contents-end 3058 :robust-begin 3001 :robust-end 3056 :post-blank 1 :post-affiliated 3001 :mode section :granularity element :cached t :parent #12# :org-element--cache-sync-key nil)) 1] #12# -1] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 3069 :end 3276 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "       (defvar experimental-core-dir (expand-file-name \"core\" init-dir)\12         \"The core functionality.\")\12\12       (add-to-list 'load-path experimental-core-dir)\12" :post-blank 1 :post-affiliated 3069 :mode planning :granularity element :cached t :parent #77=(section (:begin 3069 :end 3276 :contents-begin 3069 :contents-end 3275 :robust-begin 3069 :robust-end 3273 :post-blank 1 :post-affiliated 3069 :mode section :granularity element :cached t :parent #72# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #76=(section (:begin 3289 :end 3527 :contents-begin 3289 :contents-end 3527 :robust-begin 3289 :robust-end 3525 :post-blank 0 :post-affiliated 3289 :mode section :granularity element :cached t :parent #73# :org-element--cache-sync-key nil)) 0] #73# 0] [[nil nil #74# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 3539 :end 3806 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "       (defvar experimental-vendor-dir (expand-file-name \"vendor\" init-dir)\12         \"This directory houses packages that are not yet available in ELPA (or MELPA).\")\12\12       (add-to-list 'load-path experimental-vendor-dir)\12" :post-blank 1 :post-affiliated 3539 :mode planning :granularity element :cached t :parent #75=(section (:begin 3539 :end 3806 :contents-begin 3539 :contents-end 3805 :robust-begin 3539 :robust-end 3803 :post-blank 1 :post-affiliated 3539 :mode section :granularity element :cached t :parent #74# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #75# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 3289 :end 3527 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "       (defvar experimental-modules-dir (expand-file-name  \"modules\" init-dir)\12         \"This is the folder for Experimental modules.\")\12\12       (add-to-list 'load-path experimental-modules-dir )\12" :post-blank 0 :post-affiliated 3289 :mode planning :granularity element :cached t :parent #76# :org-element--cache-sync-key nil)) 0] #77# -1] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 679 :end 938 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (defun cleanup-80 ()\12    (interactive)\12    (beginning-of-line)\12    (forward-char 80)\12    (forward-word)\12    (backward-word)\12\12    ;; insert new line char\12    (newline-and-indent))\12\12  (global-set-key (kbd \"s-8\") 'cleanup-80)\12" :post-blank 1 :post-affiliated 679 :mode nil :granularity element :org-element--cache-sync-key nil :cached t :parent #69#)) 1] [[[[[nil nil #80=(section (:begin 3820 :end 4048 :contents-begin 3820 :contents-end 4047 :robust-begin 3820 :robust-end 4045 :post-blank 1 :post-affiliated 3820 :mode section :granularity element :cached t :parent #78# :org-element--cache-sync-key nil)) 0] [nil nil #79# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 3820 :end 4048 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "       (defvar experimental-savefile-dir (expand-file-name \"savefile\" init-dir)\12         \"This directory NEEDS CORRECTION.\")\12\12       (add-to-list 'load-path experimental-savefile-dir)\12" :post-blank 1 :post-affiliated 3820 :mode planning :granularity element :cached t :parent #80# :org-element--cache-sync-key nil)) 0] [[nil nil (paragraph (:begin 4149 :end 4181 :contents-begin 4149 :contents-end 4180 :post-blank 1 :post-affiliated 4149 :mode planning :granularity element :cached t :parent #82=(section (:begin 4149 :end 4359 :contents-begin 4149 :contents-end 4358 :robust-begin 4149 :robust-end 4356 :post-blank 1 :post-affiliated 4149 :mode section :granularity element :cached t :parent #79# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #81# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 4181 :end 4359 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "      (use-package bind-key\12        :ensure t\12        :config\12        (add-to-list 'same-window-buffer-names \"*Personal Keybindings*\"))\12" :post-blank 1 :post-affiliated 4181 :mode nil :granularity element :cached t :parent #82# :org-element--cache-sync-key nil)) 0] #82# 0] [[[nil nil (paragraph (:begin 4377 :end 4465 :contents-begin 4377 :contents-end 4464 :post-blank 1 :post-affiliated 4377 :mode planning :granularity element :cached t :parent #84=(section (:begin 4377 :end 4887 :contents-begin 4377 :contents-end 4886 :robust-begin 4377 :robust-end 4884 :post-blank 1 :post-affiliated 4377 :mode section :granularity element :cached t :parent #81# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #83# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 4465 :end 4887 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "      (use-package recentf\12        :init\12        (setq recentf-max-menu-items 20\12              recentf-auto-cleanup 'never\12              recentf-keep '(file-remote-p file-readable-p))\12        (recentf-mode 1)\12        (let ((last-ido \"~/.emacs.d/ido.last\"))\12          (when (file-exists-p last-ido)\12            (delete-file last-ido)))\12\12        :bind (\"s-r\" . recentf-open-files))\12" :post-blank 1 :post-affiliated 4465 :mode nil :granularity element :cached t :parent #84# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 4902 :end 5345 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "                  (use-package ace-window\12                    :ensure t\12                    :init\12                    (custom-set-faces\12                     '(aw-leading-char-face\12                       ((t (:inherit ace-jump-face-foreground\12                                     :height 3.0\12                                     :foreground \"red\")))))\12                    :bind (\"C-x o\" . ace-window))\12" :post-blank 1 :post-affiliated 4902 :mode planning :granularity element :cached t :parent #86=(section (:begin 4902 :end 5345 :contents-begin 4902 :contents-end 5344 :robust-begin 4902 :robust-end 5342 :post-blank 1 :post-affiliated 4902 :mode section :granularity element :cached t :parent #83# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #96=(section (:begin 5364 :end 5500 :contents-begin 5364 :contents-end 5499 :robust-begin 5364 :robust-end 5497 :post-blank 1 :post-affiliated 5364 :mode section :granularity element :cached t :parent #85# :org-element--cache-sync-key nil)) 0] #85# 0] #86# 0] #84# 0] [[[[nil nil #87# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 5513 :end 5591 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "      (fset 'yes-or-no-p 'y-or-n-p)\12" :post-blank 1 :post-affiliated 5513 :mode planning :granularity element :cached t :parent #88=(section (:begin 5513 :end 5591 :contents-begin 5513 :contents-end 5590 :robust-begin 5513 :robust-end 5588 :post-blank 1 :post-affiliated 5513 :mode section :granularity element :cached t :parent #87# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #88# 0] [[nil nil #90=(section (:begin 5610 :end 6049 :contents-begin 5610 :contents-end 6048 :robust-begin 5610 :robust-end 6046 :post-blank 1 :post-affiliated 5610 :mode section :granularity element :cached t :parent #89# :org-element--cache-sync-key nil)) 0] [nil nil #25# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 5610 :end 6049 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12;; Font size\12(global-set-key (kbd \"C-+\") 'text-scale-increase)\12(global-set-key (kbd \"C--\") 'text-scale-decrease)\12\12;; Window switching. (C-x o goes to the next window)\12(global-set-key (kbd \"C-x O\") (lambda ()\12                                (interactive)\12                                (other-window -1))) ;; back one\12\12;; toggle menu-bar visibility\12(global-set-key (kbd \"<f12>\") 'menu-bar-mode)\12\12" :post-blank 1 :post-affiliated 5610 :mode planning :granularity element :cached t :parent #90# :org-element--cache-sync-key nil)) 0] #89# 0] [[[nil nil #93=(section (:begin 6108 :end 6257 :contents-begin 6108 :contents-end 6256 :robust-begin 6108 :robust-end 6254 :post-blank 1 :post-affiliated 6108 :mode section :granularity element :cached t :parent #91# :org-element--cache-sync-key nil)) 0] [nil nil #92# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 6108 :end 6257 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "       ;; warn when opening files bigger than 100MB\12       (setq large-file-warning-threshold 100000000)\12" :post-blank 1 :post-affiliated 6108 :mode planning :granularity element :cached t :parent #93# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 6293 :end 6557 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "       ;; config changes made through the customize UI will be stored here\12       (setq custom-file (expand-file-name \"custom.el\" user-emacs-directory))\12       (ignore-errors (load custom-file)) ;; It may not yet exist.\12" :post-blank 1 :post-affiliated 6293 :mode planning :granularity element :cached t :parent #95=(section (:begin 6293 :end 6557 :contents-begin 6293 :contents-end 6556 :robust-begin 6293 :robust-end 6554 :post-blank 1 :post-affiliated 6293 :mode section :granularity element :cached t :parent #92# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #151=(section (:begin 6595 :end 6715 :contents-begin 6595 :contents-end 6714 :robust-begin 6595 :robust-end 6712 :post-blank 1 :post-affiliated 6595 :mode section :granularity element :cached t :parent #94# :org-element--cache-sync-key nil)) 0] #94# 0] #95# 0] #91# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 5364 :end 5500 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "      (use-package helm-descbinds\12        :ensure t\12        :bind (\"C-h b\" . helm-descbinds))\12" :post-blank 1 :post-affiliated 5364 :mode planning :granularity element :cached t :parent #96# :org-element--cache-sync-key nil)) 0] #78# -1] [[[[[[[nil nil #97# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 6764 :end 7650 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; Emacs modes typically provide a standard means to change the\12  ;; indentation width -- eg. c-basic-offset: use that to adjust your\12  ;; personal indentation width, while maintaining the style (and\12  ;; meaning) of any files you load.\12  (setq-default indent-tabs-mode nil)   ;; don't use tabs to indent\12  (setq-default tab-width 8)            ;; but maintain correct appearance\12\12  ;; Newline at end of file\12  (setq require-final-newline t)\12\12  ;; delete the selection with a keypress\12  (delete-selection-mode t)\12\12  ;; store all backup and autosave files in the tmp dir\12  (setq backup-directory-alist\12        `((\".*\" . ,temporary-file-directory)))\12  (setq auto-save-file-name-transforms\12        `((\".*\" ,temporary-file-directory t)))\12\12  ;; revert buffers automatically when underlying files are changed externally\12  (global-auto-revert-mode t)\12\12" :post-blank 1 :post-affiliated 6764 :mode planning :granularity element :cached t :parent #98=(section (:begin 6764 :end 7650 :contents-begin 6764 :contents-end 7649 :robust-begin 6764 :robust-end 7647 :post-blank 1 :post-affiliated 6764 :mode section :granularity element :cached t :parent #97# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #98# 0] [[nil nil #100=(section (:begin 7668 :end 7912 :contents-begin 7668 :contents-end 7911 :robust-begin 7668 :robust-end 7909 :post-blank 1 :post-affiliated 7668 :mode section :granularity element :cached t :parent #99# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 7703 :end 7912 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "      (require 'server)\12      (add-hook 'after-init-hook\12                (lambda ()\12                  (unless (server-running-p)\12                    (server-start))))\12" :post-blank 1 :post-affiliated 7703 :mode nil :granularity element :cached t :parent #100# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 7668 :end 7703 :contents-begin 7668 :contents-end 7702 :post-blank 1 :post-affiliated 7668 :mode planning :granularity element :cached t :parent #100# :org-element--cache-sync-key nil)) 0] #99# 0] [[[nil nil #103=(section (:begin 7929 :end 8348 :contents-begin 7929 :contents-end 8346 :robust-begin 7929 :robust-end 8344 :post-blank 2 :post-affiliated 7929 :mode section :granularity element :cached t :parent #101# :org-element--cache-sync-key nil)) 0] [nil nil #102# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 7929 :end 8348 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "      ;; more useful frame title, that show either a file or a\12      ;; buffer name (if the buffer isn't visiting a file)\12      (setq frame-title-format\12            '(\"\" invocation-name \" Experimental - \" (:eval (if (buffer-file-name)\12                                                  (abbreviate-file-name (buffer-file-name))\12                                                \"%b\"))))\12" :post-blank 2 :post-affiliated 7929 :mode planning :granularity element :cached t :parent #103# :org-element--cache-sync-key nil)) 0] [[nil nil (paragraph (:begin 8362 :end 8463 :contents-begin 8362 :contents-end 8462 :post-blank 1 :post-affiliated 8362 :mode planning :granularity element :cached t :parent #105=(section (:begin 8362 :end 8673 :contents-begin 8362 :contents-end 8672 :robust-begin 8362 :robust-end 8670 :post-blank 1 :post-affiliated 8362 :mode section :granularity element :cached t :parent #102# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #104# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 8463 :end 8673 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package which-key\12    :diminish\12    :defer 5\12    :config (which-key-mode)\12            (which-key-setup-side-window-bottom)\12            (setq which-key-idle-delay 0.05))\12" :post-blank 1 :post-affiliated 8463 :mode nil :granularity element :cached t :parent #105# :org-element--cache-sync-key nil)) 0] #105# 0] #101# 0] [[[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 8695 :end 8754 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "      (tool-bar-mode -1)\12" :post-blank 1 :post-affiliated 8695 :mode planning :granularity element :cached t :parent #113=(section (:begin 8695 :end 8754 :contents-begin 8695 :contents-end 8753 :robust-begin 8695 :robust-end 8751 :post-blank 1 :post-affiliated 8695 :mode section :granularity element :cached t :parent #104# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #106# 0] #32# 0] [[nil nil (paragraph (:begin 8788 :end 8855 :contents-begin 8788 :contents-end 8855 :post-blank 0 :post-affiliated 8788 :mode planning :granularity element :cached t :parent #108=(section (:begin 8788 :end 9233 :contents-begin 8788 :contents-end 9231 :robust-begin 8788 :robust-end 9229 :post-blank 2 :post-affiliated 8788 :mode section :granularity element :cached t :parent #106# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #107# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 8855 :end 9233 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; (use-package ivy\12  ;;   :ensure t\11\11\11\11;make sure ivy is installed\12  ;;   :diminish\12  ;;   :init (ivy-mode 1)\11\11\11;globally at startup\12  ;;   :config\12  ;;   (setq ivy-use-virtual-buffers t)\12  ;;   (setq enable-recursive-minibuffers t)\12  ;;   (setq ivy-height 20)\12  ;;   (setq ivy-count-format \"%d/%d \")\12  ;;   :bind (\"C-c C-r\" . ivy-resume))\12" :post-blank 2 :post-affiliated 8855 :mode nil :granularity element :cached t :parent #108# :org-element--cache-sync-key nil)) 0] #108# 0] [[[nil nil (paragraph (:begin 9245 :end 9265 :contents-begin 9245 :contents-end 9265 :post-blank 0 :post-affiliated 9245 :mode planning :granularity element :cached t :parent #110=(section (:begin 9245 :end 9361 :contents-begin 9245 :contents-end 9360 :robust-begin 9245 :robust-end 9358 :post-blank 1 :post-affiliated 9245 :mode section :granularity element :cached t :parent #107# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #109# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 9265 :end 9361 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "(use-package swiper\12    :ensure t\12    :bind (\"C-s\" . swiper))\12" :post-blank 1 :post-affiliated 9265 :mode nil :granularity element :cached t :parent #110# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 9374 :end 10157 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; (use-package counsel\12  ;;   :ensure t\12  ;;   :bind*\11\11\11\11;load when pressed\12  ;;   (\12  ;;    (\"M-x\"     . counsel-M-x)\12  ;;    (\"C-x C-f\" . counsel-find-file)\12  ;;    (\"C-x C-r\" . counsel-recentf)  ; search for recently edited\12  ;;    (\"C-c g\"   . counsel-git)      ; search for files in git repo\12  ;;    (\"C-c j\"   . counsel-git-grep) ; search for regexp in git repo\12  ;;    (\"C-c /\"   . counsel-ag)       ; Use ag for regexp\12  ;;    (\"C-x l\"   . counsel-locate)\12  ;;    (\"C-x C-f\" . counsel-find-file)\12  ;;    (\"<f1> f\"  . counsel-describe-function)\12  ;;    (\"<f1> v\"  . counsel-describe-variable)\12  ;;    (\"<f1> l\"  . counsel-find-library)\12  ;;    (\"<f2> i\"  . counsel-info-lookup-symbol)\12  ;;    (\"<f2> u\"  . counsel-unicode-char)\12  ;;    ))\12" :post-blank 1 :post-affiliated 9374 :mode planning :granularity element :cached t :parent #112=(section (:begin 9374 :end 10157 :contents-begin 9374 :contents-end 10156 :robust-begin 9374 :robust-end 10154 :post-blank 1 :post-affiliated 9374 :mode section :granularity element :cached t :parent #109# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #130=(section (:begin 10166 :end 10386 :contents-begin 10166 :contents-end 10385 :robust-begin 10166 :robust-end 10383 :post-blank 1 :post-affiliated 10166 :mode section :granularity element :cached t :parent #111# :org-element--cache-sync-key nil)) 0] #111# 0] #112# 0] #110# 0] #113# 0] [[[[[nil nil #114# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 10419 :end 10963 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package ido\12    :ensure t\12    :config\12    (setq ido-enable-prefix nil\12          ido-enable-flex-matching t\12          ido-create-new-buffer 'always\12          ido-use-filename-at-point 'guess\12          ido-max-prospects 10\12          ido-save-directory-list-file (expand-file-name \"ido.hist\" experimental-savefile-dir)\12          ido-default-file-method 'selected-window\12          ido-auto-merge-work-directories-length -1)\12    (ido-mode +1)\12    (ido-ubiquitous-mode +1)\12    (setq ido-use-faces nil)\12\12    )\12" :post-blank 1 :post-affiliated 10419 :mode planning :granularity element :cached t :parent #115=(section (:begin 10419 :end 11390 :contents-begin 10419 :contents-end 11389 :robust-begin 10419 :robust-end 11387 :post-blank 1 :post-affiliated 10419 :mode section :granularity element :cached t :parent #114# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #115# 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 10988 :end 11098 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package flx-ido\12    :ensure t\12    :config\12    (flx-ido-mode +1)\12   )\12" :post-blank 1 :post-affiliated 10988 :mode nil :granularity element :cached t :parent #115# :org-element--cache-sync-key nil)) 0] [nil nil #116# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 11098 :end 11390 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package smex\12    :ensure t\12    :config\12    (setq smex-save-file (expand-file-name \".smex-items\" experimental-savefile-dir))\12    (smex-initialize)\12    (global-set-key (kbd \"M-x\") 'smex)\12    (global-set-key (kbd \"M-X\") 'smex-major-mode-commands)\12\12    )\12" :post-blank 1 :post-affiliated 11098 :mode nil :granularity element :cached t :parent #115# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 10963 :end 10988 :contents-begin 10963 :contents-end 10988 :post-blank 0 :post-affiliated 10963 :mode nil :granularity element :cached t :parent #115# :org-element--cache-sync-key nil)) 0] [[[nil nil (paragraph (:begin 11402 :end 11415 :contents-begin 11402 :contents-end 11414 :post-blank 1 :post-affiliated 11402 :mode planning :granularity element :cached t :parent #118=(section (:begin 11402 :end 11947 :contents-begin 11402 :contents-end 11946 :robust-begin 11402 :robust-end 11944 :post-blank 1 :post-affiliated 11402 :mode section :granularity element :cached t :parent #116# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #117# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 11415 :end 11947 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package company\12    :ensure t\12    :config\12    (setq company-idle-delay 0.5)\12    (setq company-show-numbers t)\12    (setq company-tooltip-limit 10)\12    (setq company-minimum-prefix-length 2)\12    (setq company-tooltip-align-annotations t)\12    ;; invert the navigation direction if the the completion popup-isearch-match\12    ;; is displayed on top (happens near the bottom of windows)\12    (setq company-tooltip-flip-when-above t)\12\12    (global-company-mode 1)\12    (diminish 'company-mode)\12\12    )\12" :post-blank 1 :post-affiliated 11415 :mode nil :granularity element :cached t :parent #118# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 11960 :end 12950 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; (use-package origami\12  ;;   :ensure t\12  ;;   :bind ((\"C-c o C\" . origami-close-all-nodes)\12  ;;          (\"C-c o c\" . origami-close-node)\12  ;;          (\"C-c o x\" . origami-close-node-recursively)\12\12  ;;          (\"C-c o f\" . origami-forward-fold)\12  ;;          (\"C-c o F\" . origami-forward-fold-same-level)\12  ;;          (\"C-c o g\" . origami-forward-toggle-node)\12\12  ;;          (\"C-c o n\" . origami-next-fold)\12\12  ;;          (\"C-c o J\" .   origami-open-all-nodes)\12  ;;          (\"C-c o j\" .   origami-open-node)\12  ;;          (\"C-c o m\" .   origami-open-node-recursively)\12\12  ;;          (\"C-c o p\" . origami-previous-fold)\12\12  ;;          (\"C-c o r\" . origami-redo)\12  ;;          (\"C-c o R\" . origami-reset)\12\12  ;;          (\"C-c o s\" . origami-show-node)\12  ;;          (\"C-c o S\" . origami-show-only-node)\12\12  ;;          (\"C-c o T\" . origami-toggle-all-nodes)\12  ;;          (\"C-c o t\" . origami-toggle-node)\12  ;;          (\"C-c o u\" .   origami-undo)))\12" :post-blank 1 :post-affiliated 11960 :mode planning :granularity element :cached t :parent #120=(section (:begin 11960 :end 12950 :contents-begin 11960 :contents-end 12949 :robust-begin 11960 :robust-end 12947 :post-blank 1 :post-affiliated 11960 :mode section :granularity element :cached t :parent #117# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #129=(section (:begin 12985 :end 13432 :contents-begin 12985 :contents-end 13428 :robust-begin 12985 :robust-end 13426 :post-blank 4 :post-affiliated 12985 :mode section :granularity element :cached t :parent #119# :org-element--cache-sync-key nil)) 0] #119# 0] #120# 0] #118# 0] [[[[nil nil #43# 0] [nil nil #121# 0] (section (:begin 13460 :end 13540 :contents-begin 13460 :contents-end 13539 :robust-begin 13460 :robust-end 13537 :post-blank 1 :post-affiliated 13460 :mode section :granularity element :cached t :parent #43# :org-element--cache-sync-key nil)) 0] [[nil nil (paragraph (:begin 13554 :end 13598 :contents-begin 13554 :contents-end 13598 :post-blank 0 :post-affiliated 13554 :mode planning :granularity element :cached t :parent #123=(section (:begin 13554 :end 14491 :contents-begin 13554 :contents-end 14490 :robust-begin 13554 :robust-end 14488 :post-blank 1 :post-affiliated 13554 :mode section :granularity element :cached t :parent #121# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #122# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 13598 :end 14491 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  ;; ;; Org-Roam basic configuration\12  ;; (setq org-directory (concat (getenv \"HOME\") \"/Documents/org-roam/\"))\12\12  ;; (use-package org-roam\12  ;;   :ensure t\12  ;;   :after org\12  ;;   :init (setq org-roam-v2-ack t) ;; Acknowledge V2 upgrade\12  ;;   :custom\12  ;;   (org-roam-directory (file-truename org-directory))\12  ;;   :config\12  ;;   (org-roam-db-autosync-enable)\12  ;;   (setq org-roam-completion-everywhere t)\12  ;;   :bind ((\"C-c n f\" . org-roam-node-find)\12  ;;          (\"C-c n g\" . org-roam-graph)\12  ;;          (\"C-c n r\" . org-roam-node-random)\12  ;;          (:map org-mode-map\12  ;;                ((\"C-c n i\" . org-roam-node-insert)\12  ;;                 (\"C-c n o\" . org-id-get-create)\12  ;;                 (\"C-c n t\" . org-roam-tag-add)\12  ;;                 (\"C-c n a\" . org-roam-alias-add)\12  ;;                 (\"C-c n l\" . org-roam-buffer-toggle)))))\12" :post-blank 1 :post-affiliated 13598 :mode nil :granularity element :cached t :parent #123# :org-element--cache-sync-key nil)) 0] #123# 0] [[[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 14520 :end 15024 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "       (require 'org)\12       (org-link-set-parameters \"pdf\" 'org-pdf-open nil)\12\12       (defun org-pdf-open (link)\12         \"Where page number is 105, the link should look like:\12          [[pdf:/path/to/file.pdf#105][My description.]]\"\12         (let* ((path+page (split-string link \"#\"))\12                (pdf-file (car path+page))\12                (page (car (cdr path+page))))\12           (start-process \"view-pdf\" nil \"evince\" \"--page-index\" page pdf-file)))\12" :post-blank 3 :post-affiliated 14520 :mode planning :granularity element :cached t :parent #128=(section (:begin 14520 :end 15024 :contents-begin 14520 :contents-end 15021 :robust-begin 14520 :robust-end 15019 :post-blank 3 :post-affiliated 14520 :mode section :granularity element :cached t :parent #122# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #127=(section (:begin 15053 :end 16073 :contents-begin 15053 :contents-end 16072 :robust-begin 15053 :robust-end 16070 :post-blank 1 :post-affiliated 15053 :mode section :granularity element :cached t :parent #124# :org-element--cache-sync-key nil)) 0] #124# 0] [[nil nil #125# 0] [nil nil (paragraph (:begin 16085 :end 16103 :contents-begin 16085 :contents-end 16103 :post-blank 0 :post-affiliated 16085 :mode planning :granularity element :cached t :parent #126=(section (:begin 16085 :end 16236 :contents-begin 16085 :contents-end 16235 :robust-begin 16085 :robust-end 16233 :post-blank 1 :post-affiliated 16085 :mode section :granularity element :cached t :parent #125# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #126# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 15053 :end 16073 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value " (defun my-file-line-link ()\12   \"Copy the buffer full path and line number into a clipboard\12                  for pasting into *.org file.\"\12   (interactive)\12   (let* ((home-part (concat \"/home/\"\12                             (user-login-name)))\12          (the-link\12           (let ((file-link\12                  (concat \"file:\"\12                          (let ((bfn buffer-file-name))\12                            (if (string-prefix-p home-part bfn)\12                                (concat \"~\"\12                                        (substring bfn (length home-part)))\12                              bfn))\12                          \"::\"\12                          (substring  (what-line) 5))))\12             (if (string-match \" \" file-link)\12                 (concat \"[[\" file-link \"]]\")\12               file-link))))\12     (kill-new\12      (message the-link))))\12\12        ;; we had to cheat to have s-\\ as a shortcut\12 (global-set-key (kbd (format \"%s-%c\" \"s\" 92)) 'my-file-line-link)\12" :post-blank 1 :post-affiliated 15053 :mode planning :granularity element :cached t :parent #127# :org-element--cache-sync-key nil)) 0] #128# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 12985 :end 13432 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "      (defun double-flash-mode-line ()\12        (let ((flash-sec (/ 1.0 20)))\12          (invert-face 'mode-line)\12          (run-with-timer flash-sec nil #'invert-face 'mode-line)\12          (run-with-timer (* 2 flash-sec) nil #'invert-face 'mode-line)\12          (run-with-timer (* 3 flash-sec) nil #'invert-face 'mode-line)))\12\12      (add-hook 'overwrite-mode-hook #'(lambda () (double-flash-mode-line)))\12" :post-blank 4 :post-affiliated 12985 :mode planning :granularity element :cached t :parent #129# :org-element--cache-sync-key nil)) 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 10166 :end 10386 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (global-set-key (kbd \"M-x\") 'smex)\12  (global-set-key (kbd \"M-X\") 'smex-major-mode-commands)\12  ;; This is your old M-x.\12  (global-set-key (kbd \"C-c C-c M-x\") 'execute-extended-command)\12" :post-blank 1 :post-affiliated 10166 :mode planning :granularity element :cached t :parent #130# :org-element--cache-sync-key nil)) 0] [[[[[nil nil #131# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 16244 :end 16449 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (add-hook 'elm-mode-hook 'elm-format-on-save-mode)\12  (add-hook 'elm-mode-hook\12            #'(lambda ()\12                (local-set-key (kbd \"C-]\") 'insert-graph-arrow)))\12\12" :post-blank 0 :post-affiliated 16244 :mode planning :granularity element :cached t :parent #132=(section (:begin 16244 :end 16449 :contents-begin 16244 :contents-end 16449 :robust-begin 16244 :robust-end 16447 :post-blank 0 :post-affiliated 16244 :mode section :granularity element :cached t :parent #131# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #132# 0] [[nil nil (section (:begin 16458 :end 16529 :contents-begin 16458 :contents-end 16529 :robust-begin 16458 :robust-end 16527 :post-blank 0 :post-affiliated 16458 :mode section :granularity element :cached t :parent #51# :org-element--cache-sync-key nil)) 0] [nil nil (section (:begin 16545 :end 16586 :contents-begin 16545 :contents-end 16585 :robust-begin 16545 :robust-end 16583 :post-blank 1 :post-affiliated 16545 :mode section :granularity element :cached t :parent #53# :org-element--cache-sync-key nil)) 0] #53# 0] #51# 0] [[[nil nil #134=(section (:begin 16604 :end 16786 :contents-begin 16604 :contents-end 16785 :robust-begin 16604 :robust-end 16783 :post-blank 1 :post-affiliated 16604 :mode section :granularity element :cached t :parent #133# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 16635 :end 16786 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (use-package jacek-verse\12    :commands jacek-verse\12    :load-path \"modules/\"\12    :bind (\"<f5>\" . verse-link)\12    )\12" :post-blank 1 :post-affiliated 16635 :mode nil :granularity element :cached t :parent #134# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 16604 :end 16635 :contents-begin 16604 :contents-end 16634 :post-blank 1 :post-affiliated 16604 :mode planning :granularity element :cached t :parent #134# :org-element--cache-sync-key nil)) 0] [[nil nil #137=(section (:begin 16799 :end 17180 :contents-begin 16799 :contents-end 17178 :robust-begin 16799 :robust-end 17176 :post-blank 2 :post-affiliated 16799 :mode section :granularity element :cached t :parent #135# :org-element--cache-sync-key nil)) 0] [nil nil #136# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 16799 :end 17180 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "    (add-to-list 'auto-mode-alist '(\"\\\\.edn\\\\'\" . clojure-mode))\12\12    (add-hook 'cider-repl-mode-hook\12              #'(lambda ()\12                 (local-set-key (kbd \"C-c M-k\") 'cider-repl-clear-buffer)))\12\12    (add-hook 'cider-repl-mode-hook\12              #'(lambda ()\12                 (local-set-key (kbd \"C-c M-a\") 'cider-load-all-files)))\12" :post-blank 2 :post-affiliated 16799 :mode planning :granularity element :cached t :parent #137# :org-element--cache-sync-key nil)) 0] #135# 0] #133# 0] [[[[nil nil (paragraph (:begin 17189 :end 17236 :contents-begin 17189 :contents-end 17235 :post-blank 1 :post-affiliated 17189 :mode planning :granularity element :cached t :parent #138=(section (:begin 17189 :end 17358 :contents-begin 17189 :contents-end 17357 :robust-begin 17189 :robust-end 17355 :post-blank 1 :post-affiliated 17189 :mode section :granularity element :cached t :parent #136# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 17323 :end 17358 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "\12" :post-blank 1 :post-affiliated 17323 :mode nil :granularity element :cached t :parent #138# :org-element--cache-sync-key nil)) 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 17236 :end 17323 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "  (setq inferior-lisp-program \"/usr/local/bin/sbcl\")\12" :post-blank 1 :post-affiliated 17236 :mode nil :granularity element :cached t :parent #138# :org-element--cache-sync-key nil)) 0] [[nil nil #140=(section (:begin 17369 :end 19873 :contents-begin 17369 :contents-end 19872 :robust-begin 17369 :robust-end 19870 :post-blank 1 :post-affiliated 17369 :mode section :granularity element :cached t :parent #139# :org-element--cache-sync-key nil)) 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 17462 :end 19873 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "   ;; (when nil\12   ;; ;;; this code has been responsible for slime version problem\12   ;;   (defvar slime-helper-el \"~/quicklisp/slime-helper.el\")\12   ;;   (when (file-exists-p slime-helper-el)\12   ;;     (load (expand-file-name slime-helper-el)))\12\12   ;;   (require 'slime)\12   ;;   (require 'slime-repl)\12   ;;   (require 'slime-autoloads)\12\12   ;;   (setq slime-contribs '(slime-fancy slime-fancy-inspector))\12\12   ;; ;;; switch depending on OS\12   ;;   (setq inferior-lisp-program (if (equal system-type 'windows-nt)\12   ;;                                   \"sbcl.exe\"\12   ;;                                 \"sbcl\"))\12\12   ;;   (defun slime-contrib-directory ()\12   ;;     (let* ((slime-folder-prefix \"slime-20\")\12   ;;            (folder-length (length slime-folder-prefix))\12   ;;            (slime-folder (car (seq-filter (lambda(x) (and (>= (length x)\12   ;;                                                               folder-length)\12   ;;                                                           (equal slime-folder-prefix\12   ;;                                                                  (seq-subseq x 0 folder-length))) )\12   ;;                                           (directory-files \"~/.emacs.d/elpa\")))))\12   ;;       (concat \"~/.emacs.d/elpa/\" slime-folder \"/contrib/\")))\12\12\12\12   ;; ;;; copy last s-expression to repl\12   ;; ;;; useful for expressions like (in-package #:whatever)\12   ;; ;;; alternatively you can use C-c ~ with cursor after (in-package :some-package)\12   ;; ;;; https://www.reddit.com/r/lisp/comments/ehs12v/copying_last_expression_to_repl_in_emacsslime/\12\12   ;;   (defun slime-copy-last-expression-to-repl (string)\12   ;;     (interactive (list (slime-last-expression)))\12   ;;     (slime-switch-to-output-buffer)\12   ;;     (goto-char (point-max))\12   ;;     (insert string))\12\12   ;;   (global-set-key (kbd \"C-c C-3\") 'slime-copy-last-expression-to-repl)\12\12   ;;   (eval-after-load \"slime\"\12   ;;     '(progn\12   ;;        (setq slime-complete-symbol-function 'slime-fuzzy-complete-symbol\12   ;;              slime-fuzzy-completion-in-place t\12   ;;              slime-enable-evaluate-in-emacs t\12   ;;              slime-autodoc-use-multiline-p t\12   ;;              tab-always-indent 'complete)\12\12\12   ;;        (define-key slime-mode-map (kbd \"C-c i\") 'slime-inspect)\12   ;;        (define-key slime-mode-map (kbd \"C-c C-s\") 'slime-selector)\12   ;;        ))\12   ;;   )\12" :post-blank 1 :post-affiliated 17462 :mode nil :granularity element :cached t :parent #140# :org-element--cache-sync-key nil)) 0] (paragraph (:begin 17369 :end 17462 :contents-begin 17369 :contents-end 17461 :post-blank 1 :post-affiliated 17369 :mode planning :granularity element :cached t :parent #140# :org-element--cache-sync-key nil)) 0] #139# 0] [[[[nil nil #143=(section (:begin 19886 :end 21021 :contents-begin 19886 :contents-end 21020 :robust-begin 19886 :robust-end 21018 :post-blank 1 :post-affiliated 19886 :mode section :granularity element :cached t :parent #141# :org-element--cache-sync-key nil)) 0] [nil nil #142# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 19886 :end 21021 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "   (add-hook 'minibuffer-inactive-mode-hook #'paredit-mode)\12   (add-hook 'minibuffer-inactive-mode-hook #'rainbow-delimiters-mode)\12\12   (defun swap-paredit ()\12     \"Replace smartparens with superior paredit.\"\12     (smartparens-mode -1)\12     (paredit-mode +1))\12\12   (autoload 'paredit-mode \"paredit\"\12     \"Minor mode for pseudo-structurally editing Lisp code.\" t)\12   (add-hook 'emacs-lisp-mode-hook (lambda () (swap-paredit)))\12\12   (add-hook 'lisp-mode-hook (lambda () (swap-paredit)))\12   (add-hook 'lisp-interaction-mode-hook (lambda () (swap-paredit)))\12\12   (add-hook 'scheme-mode-hook (lambda () (swap-paredit)))\12   (add-hook 'geiser-repl-mode-hook (lambda () (swap-paredit)))\12   (add-hook 'geiser-repl-mode-hook 'rainbow-delimiters-mode)\12\12   (add-hook 'ielm-mode-hook (lambda () (swap-paredit)))\12   (add-hook 'ielm-mode-hook 'rainbow-delimiters-mode)\12\12   (add-hook 'slime-repl-mode-hook (lambda () (swap-paredit)))\12   (add-hook 'slime-repl-mode-hook 'rainbow-delimiters-mode)\12\12   (add-hook 'clojure-mode-hook (lambda () (swap-paredit)))\12   (add-hook 'cider-repl-mode-hook (lambda () (swap-paredit)))\12" :post-blank 1 :post-affiliated 19886 :mode planning :granularity element :cached t :parent #143# :org-element--cache-sync-key nil)) 0] [[nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 21035 :end 21491 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "   ;(require 'slime)\12   ;; (setq common-lisp-hyperspec-root\12   ;;       (format\12   ;;        \"file:/home/%s/Documents/Manuals/Lisp/HyperSpec-7-0/HyperSpec/\"\12   ;;        user-login-name))\12\12     (defun unfold-lisp ()\12       \"Unfold lisp code.\"\12       (interactive)\12       (search-forward \")\")\12       (backward-char)\12       (search-forward \" \")\12       (newline-and-indent))\12\12     (global-set-key (kbd \"s-0\") 'unfold-lisp)\12" :post-blank 1 :post-affiliated 21035 :mode planning :granularity element :cached t :parent #145=(section (:begin 21035 :end 21491 :contents-begin 21035 :contents-end 21490 :robust-begin 21035 :robust-end 21488 :post-blank 1 :post-affiliated 21035 :mode section :granularity element :cached t :parent #142# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] [nil nil #150=(section (:begin 21517 :end 25797 :contents-begin 21517 :contents-end 25795 :robust-begin 21517 :robust-end 25793 :post-blank 2 :post-affiliated 21517 :mode section :granularity element :cached t :parent #144# :org-element--cache-sync-key nil)) 0] #144# 0] #145# 0] [[[nil nil #146# 0] [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 25816 :end 25972 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "     (message \"M-x describe-personal-keybindings will show keybindings defined in use-package user configuration.\")\12" :post-blank 1 :post-affiliated 25816 :mode planning :granularity element :cached t :parent #147=(section (:begin 25816 :end 25972 :contents-begin 25816 :contents-end 25971 :robust-begin 25816 :robust-end 25969 :post-blank 1 :post-affiliated 25816 :mode section :granularity element :cached t :parent #146# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #147# 0] [nil [nil nil (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 25983 :end 26167 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "     ;; put frequency of garbage collection back to normal\12     (setq gc-cons-threshold  800000)\12\12     (message \"\\nthe end of literal config\\n\")\12" :post-blank 0 :post-affiliated 25983 :mode planning :granularity element :cached t :parent #149=(section (:begin 25983 :end 26167 :contents-begin 25983 :contents-end 26167 :robust-begin 25983 :robust-end 26165 :post-blank 0 :post-affiliated 25983 :mode section :granularity element :cached t :parent #148# :org-element--cache-sync-key nil)) :org-element--cache-sync-key nil)) 0] #149# 1] #148# 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 21517 :end 25797 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "   ;;; this add capability to define your own hook for responding to theme changes\12   (defvar after-load-theme-hook nil\12     \"Hook run after a color theme is loaded using `load-theme'.\")\12\12   (defadvice load-theme (after run-after-load-theme-hook activate)\12     \"Run `after-load-theme-hook'.\"\12     (run-hooks 'after-load-theme-hook))\12\12   (require 'color)\12   (defun hsl-to-hex (h s l)\12     \"Convert H S L to hex colours.\"\12     (let (rgb)\12       (setq rgb (color-hsl-to-rgb h s l))\12       (color-rgb-to-hex (nth 0 rgb)\12                         (nth 1 rgb)\12                         (nth 2 rgb))))\12\12   (defun hex-to-rgb (hex)\12     \"Convert a 6 digit HEX color to r g b.\"\12     (mapcar #'(lambda (s) (/ (string-to-number s 16) 255.0))\12             (list (substring hex 1 3)\12                   (substring hex 3 5)\12                   (substring hex 5 7))))\12\12   (defun bg-color ()\12     \"Return COLOR or it's hexvalue.\"\12     (let ((color (face-attribute 'default :background)))\12       (if (equal (substring color 0 1) \"#\")\12           color\12         (apply 'color-rgb-to-hex (color-name-to-rgb color)))))\12\12   (defun bg-light ()\12     \"Calculate background brightness.\"\12     (< (color-distance  \"white\"\12                         (bg-color))\12        (color-distance  \"black\"\12                         (bg-color))))\12\12   (defun whitespace-line-bg ()\12     \"Calculate long line highlight depending on background brightness.\"\12     (apply 'color-rgb-to-hex\12            (apply 'color-hsl-to-rgb\12                   (apply (if (bg-light) 'color-darken-hsl 'color-lighten-hsl)\12                          (append\12                           (apply 'color-rgb-to-hsl\12                                  (hex-to-rgb\12                                   (bg-color)))\12                           '(7))))))\12\12   (defun bracket-colors ()\12     \"Calculate the bracket colours based on background.\"\12     (let (hexcolors lightvals)\12       (setq lightvals (if (bg-light)\12                           (list (list .60 1.0 0.55) ; H S L\12                                 (list .30 1.0 0.40)\12                                 (list .11 1.0 0.55)\12                                 (list .01 1.0 0.65)\12                                 (list .75 0.9 0.55) ; H S L\12                                 (list .49 0.9 0.40)\12                                 (list .17 0.9 0.47)\12                                 (list .05 0.9 0.55))\12                         (list (list .70 1.0 0.68) ; H S L\12                               (list .30 1.0 0.40)\12                               (list .11 1.0 0.50)\12                               (list .01 1.0 0.50)\12                               (list .81 0.9 0.55) ; H S L\12                               (list .49 0.9 0.40)\12                               (list .17 0.9 0.45)\12                               (list .05 0.9 0.45))))\12       (dolist (n lightvals)\12         (push (apply 'hsl-to-hex n) hexcolors))\12       (reverse hexcolors)))\12\12\12   (defun colorise-brackets ()\12     \"Apply my own colours to rainbow delimiters.\"\12     (interactive)\12     (require 'rainbow-delimiters)\12     (custom-set-faces\12      ;; change the background but do not let theme to interfere with the foreground\12      `(whitespace-line ((t (:background ,(whitespace-line-bg)))))\12      ;; or use (list-colors-display)\12      `(rainbow-delimiters-depth-2-face ((t (:foreground ,(nth 0 (bracket-colors))))))\12      `(rainbow-delimiters-depth-3-face ((t (:foreground ,(nth 1 (bracket-colors))))))\12      `(rainbow-delimiters-depth-4-face ((t (:foreground ,(nth 2 (bracket-colors))))))\12      `(rainbow-delimiters-depth-5-face ((t (:foreground ,(nth 3 (bracket-colors))))))\12      `(rainbow-delimiters-depth-6-face ((t (:foreground ,(nth 4 (bracket-colors))))))\12      `(rainbow-delimiters-depth-7-face ((t (:foreground ,(nth 5 (bracket-colors))))))\12      `(rainbow-delimiters-depth-8-face ((t (:foreground ,(nth 6 (bracket-colors))))))\12      `(rainbow-delimiters-depth-9-face ((t (:foreground ,(nth 7 (bracket-colors))))))\12      `(rainbow-delimiters-unmatched-face ((t (:foreground \"white\" :background \"red\"))))\12      `(highlight ((t (:foreground \"#ff0000\" :background \"#888\"))))))\12\12   (colorise-brackets)\12\12   (add-hook 'prog-mode-hook 'rainbow-delimiters-mode)\12   (add-hook 'after-load-theme-hook 'colorise-brackets)\12\12\12" :post-blank 2 :post-affiliated 21517 :mode planning :granularity element :cached t :parent #150# :org-element--cache-sync-key nil)) 0] #141# 1] #138# 1] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 16103 :end 16236 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "      ;; (use-package idris2-mode\12      ;;   :load-path \"vendor/idris2-mode\"\12\12      ;;   )\12" :post-blank 1 :post-affiliated 16103 :mode nil :granularity element :cached t :parent #126# :org-element--cache-sync-key nil)) 0] (src-block (:language "emacs-lisp" :switches nil :parameters nil :begin 6595 :end 6715 :number-lines nil :preserve-indent nil :retain-labels t :use-labels t :label-fmt nil :value "       ;; \"Don't show splash screen\"\12       (setq inhibit-startup-screen t)\12" :post-blank 1 :post-affiliated 6595 :mode planning :granularity element :cached t :parent #151# :org-element--cache-sync-key nil)) 0] nil nil 0] org-element--cache-compare)))